version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash

# For this to work the folloing params need to be set in the pipeline
# ignore for now GITHUB_PATH_SECRET_OCID - the OCID of the vault secret containing the users github parsonal access token
# ignore for now GITHUB_USERNAME = the OCID of the vault secret contining the users github usename
# OCIR_HOST - The hostname part of the image tags for the image registry to use 
# OCIR_STORAGE_NAMEPACE - The tenancy storage namespace part of the image tag

env:
  # the value of a vaultVariable is the secret-id (in OCI ID format) stored in the OCI Vault service
  # you can then access the value of that secret in your build_spec.yaml commands
  # these are DELIBERATELY not exported to future stages as they may cpontain confidential info
  vaultVariables:
    OCIR_HOST_VAULT: ocid1.vaultsecret.oc1.ap-singapore-1.amaaaaaap7dotcyauydcbjwenuymlfap2t3aqh2vcstnry6hgtw4idovnvqq
    OCIR_STORAGE_NAMESPACE_VAULT: ocid1.vaultsecret.oc1.ap-singapore-1.amaaaaaap7dotcyaeqcxtgpxktt4vuniozrm3ze67vdighpciuihrdzwdcqq

  # exportedVariables are made available to use as parameters in sucessor Build Pipeline stages
  # We want to transfer over the vault values in this case, so create a variable to hold them
  # and we will copy them over
  exportedVariables:
    - BUILDRUN_HASH
    - REGISTRY_HOST
    - REGISTRY_NAMESPACE
steps:
  - type: Command
    name: "Extract Export variables"
    timeoutInSeconds: 12
    command: |
      echo Path is
      echo $PATH
      cd ${OCI_PRIMARY_SOURCE_DIR}
      ls
      echo Extracting export variables - Working in `pwd`
      cd ${OCI_PRIMARY_SOURCE_DIR}      
      echo transferring the REGISTRY_HOST and REGISTRY_NAMESPACE vault variables
      export REGISTRY_HOST=$OCIR_HOST_VAULT
      export BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      echo "BUILDRUN_HASH: " $BUILDRUN_HASH
      echo REGISTRY_HOST is $REGISTRY_HOST
      export REGISTRY_NAMESPACE=$OCIR_STORAGE_NAMESPACE_VAULT
      echo REGISTRY_NAMESPACE is $REGISTRY_NAMESPACE
      echo Image will be stored to ${REGISTRY_HOST}/${REGISTRY_NAMESPACE}/tbs-mobile:${BUILDRUN_HASH}
    onFailure:
      - type: Command
        timeoutInSeconds: 40
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400
        runAs: root 
  - type: Command
    name: "Build Source and pack into container image"
    timeoutInSeconds: 1800
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}
      echo Running docker update - Working in `pwd`
      docker build  --tag tbs-mobile:latest --file Dockerfile . 
      echo images are
      docker images
   
# This basically preserves and "names" the artifacts below (if it's not here it gets junked) so the deliver artifact stage can handle them
outputArtifacts:
  - name: tbs-mobile_image
    type: DOCKER_IMAGE
    location: tbs-mobile:latest
  - name: tbs-mobile_yaml
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/yaml/tbs-mobile.yaml
